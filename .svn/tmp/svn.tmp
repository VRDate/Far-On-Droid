package com.openfarmanager.android.filesystem.actions;

import android.util.Log;
import com.openfarmanager.android.utils.ParcelableWrapper;
import com.stericson.RootTools.RootTools;
import com.stericson.RootTools.exceptions.RootDeniedException;
import com.stericson.RootTools.execution.Command;

import java.io.*;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.TimeoutException;

/**
 * Created by sergii on 1/27/2014.
 */
public class RootTask {

    public static boolean isRoot() {
        RootTools.debugMode = true;
        return RootTools.isRootAvailable() && RootTools.isAccessGiven();
    }

    public static boolean copy(File file, File destination) {
        if (isRoot()) {
            return RootTools.copyFile("\"" + file.getAbsolutePath() + "\"", "\"" + destination.getAbsolutePath() + "\"", false, true);
        }
        return false;
    }

    public static String[] ls(File file) {
        final LinkedList<String> temp = new LinkedList<String>();
        final ParcelableWrapper<Boolean> completed = new ParcelableWrapper<Boolean>(false);
        Command ls = new Command(0, false, "ls -a \"" + file.getAbsolutePath() + "\"") {
            @Override
            public void commandOutput(int i, String s) {
                temp.add(s);
            }

            @Override
            public void commandTerminated(int i, String s) {
            }

            @Override
            public void commandCompleted(int i, int i2) {
                completed.value = true;
            }
        };
        try {
            RootTools.getShell(true).add(ls);
            while (!completed.value) {
                Thread.sleep(50);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (TimeoutException e) {
            e.printStackTrace();
        } catch (RootDeniedException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return temp.toArray(new String[temp.size()]);
    }

    public static void deleteFileOrDirectory(File file) {
        if (RootTools.isAccessGiven()) {
//            RootTools.deleteFileOrDirectory("\""+file.getAbsolutePath()+"\"", false);
            final ParcelableWrapper<Boolean> completed = new ParcelableWrapper<Boolean>(false);
            Command ls = new Command(0, false, "rm \"" + file.getAbsolutePath() + "\"") {
                @Override
                public void commandOutput(int i, String s) {
                    System.out.println("::::::  " + s);
                }

                @Override
                public void commandTerminated(int i, String s) {
                }

                @Override
                public void commandCompleted(int i, int i2) {
                    completed.value = true;
                }
            };
            try {
                RootTools.getShell(true).add(ls);
                while (!completed.value) {
                    Thread.sleep(50);
                }
            } catch (IOException e) {
                e.printStackTrace();
            } catch (TimeoutException e) {
                e.printStackTrace();
            } catch (RootDeniedException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
