package com.openfarmanager.android.adapters;

import android.content.ComponentName;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Handler;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.TextView;
import com.openfarmanager.android.App;
import com.openfarmanager.android.R;
import com.openfarmanager.android.core.archive.ArchiveScanner;
import com.openfarmanager.android.filesystem.FileProxy;
import com.openfarmanager.android.fragments.GenericPanel;
import com.openfarmanager.android.model.Bookmark;

import java.util.*;

public class LauncherAdapter extends FlatFileSystemAdapter {

    private Handler mHandler;

    public LauncherAdapter(Handler handler) {
        mHandler = handler;
        refresh();
    }

    private void refresh() {
        new AsyncTask<Void, Void, List<FileProxy>>() {

            @Override
            protected void onPreExecute() {
                super.onPreExecute();
                mHandler.sendEmptyMessage(GenericPanel.START_LOADING);
            }

            @Override
            protected List<FileProxy> doInBackground(Void... voids) {
                List<FileProxy> result = new LinkedList<FileProxy>();

                final Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
                mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);

                final PackageManager manager = App.sInstance.getPackageManager();
                final List<ResolveInfo> apps = manager.queryIntentActivities(mainIntent, 0);

                if (apps != null) {
                    for (ResolveInfo info : apps) {
                        ComponentName componentName = new ComponentName(info.activityInfo.applicationInfo.packageName, info.activityInfo.name);
                        ComponentProxy applicationInfo = new ComponentProxy();
                        applicationInfo.mComponentName = componentName;
                        applicationInfo.mName = String.valueOf(info.loadLabel(manager));
                        if (TextUtils.isEmpty(applicationInfo.mName)) {
                            applicationInfo.mName = info.activityInfo.name;
                        }

                        result.add(applicationInfo);
                    }
                }

                Collections.sort(result, new Comparator<FileProxy>() {
                    @Override
                    public int compare(FileProxy applicationInfo, FileProxy applicationInfo2) {
                        return applicationInfo.getName().compareTo(applicationInfo2.getName());
                    }
                });

                return result;
            }

            @Override
            protected void onPostExecute(List<FileProxy> result) {
                mFiles = result;
                notifyDataSetChanged();
                mHandler.sendEmptyMessage(GenericPanel.STOP_LOADING);
            }
        }.execute();
    }

    @Override
    public int getCount() {
        return mFiles.size();
    }

    @Override
    public FileProxy getItem(int i) {
        return mFiles.get(i);
    }

    @Override
    public long getItemId(int i) {
        return i;
    }

    @Override
    public View getView(int i, View view, ViewGroup viewGroup) {
        if (view == null) {
            view = LayoutInflater.from(App.sInstance.getApplicationContext()).inflate(R.layout.panel_item, null);
        }

        FileProxy info = getItem(i);

        TextView name = (TextView) view.findViewById(R.id.item_name);
        name.setText(info.getName());
        name.setTextColor(Color.GREEN);
        return view;
    }

    public void onItemClick(int i) {
        final PackageManager manager = App.sInstance.getPackageManager();
        Intent intent = manager.getLaunchIntentForPackage(getItem(i).getFullPath());
        App.sInstance.startActivity(intent);
    }

    public class ComponentProxy implements FileProxy<ComponentProxy>{
        private ComponentName mComponentName;
        private String mName;
        @Override
        public String getId() {
            return null;
        }

        @Override
        public String getName() {
            return mName;
        }

        @Override
        public boolean isDirectory() {
            return false;
        }

        @Override
        public long getSize() {
            return 0;
        }

        @Override
        public long lastModifiedDate() {
            return 0;
        }

        @Override
        public List<ComponentProxy> getChildren() {
            return null;
        }

        @Override
        public String getFullPath() {
            return mComponentName.getPackageName();
        }

        @Override
        public String getParentPath() {
            return null;
        }

        @Override
        public boolean isUpNavigator() {
            return false;
        }

        @Override
        public boolean isRoot() {
            return false;
        }

        @Override
        public boolean isVirtualDirectory() {
            return false;
        }

        @Override
        public boolean isBookmark() {
            return false;
        }

        @Override
        public Bookmark getBookmark() {
            return null;
        }
    }

}
