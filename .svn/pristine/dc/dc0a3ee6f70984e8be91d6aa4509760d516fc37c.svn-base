package com.openfarmanager.android.filesystem.actions;

import android.util.Log;

import java.io.*;
import java.util.ArrayList;

/**
 * Created by sergii on 1/27/2014.
 */


public class RootTask {

    public static void delete(File file) {
        if (LinuxShell.isRoot()) {
            if (file.isDirectory()) {
                LinuxShell.execute("rm -f -r " + LinuxShell.getCmdPath(file.getAbsolutePath()));
            } else {
                LinuxShell.execute("rm -r " + LinuxShell.getCmdPath(file.getAbsolutePath()));
            }
        }
    }

    public static boolean create(File file, boolean createDirectory) {
        return LinuxShell.isRoot() && (createDirectory ?
                LinuxShell.execute("mkdir " + LinuxShell.getCmdPath(file.getAbsolutePath())) != null :
                LinuxShell.execute("cat > " + LinuxShell.getCmdPath(file.getAbsolutePath())) != null);
    }

    public static boolean move(File file, File destination) {
        if (copy(file, new File(destination.getAbsolutePath() + "/" + file.getName()))) {
            delete(file);
            return true;
        }

        return false;
    }

    public static String[] ls(File path) {
        ArrayList<String> result = new ArrayList<String>();
        BufferedReader reader;
        try {
            reader = LinuxShell.execute("ls " + LinuxShell.getCmdPath(path.getAbsolutePath()));
            if (reader == null)
                return null;

            String line;
            while ((line = reader.readLine()) != null) {
                result.add(line);
            }
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result.toArray(new String[result.size()]);
    }

    public static boolean copy(File file, File destination) {
        return LinuxShell.execute("cat " + LinuxShell.getCmdPath(file.getAbsolutePath()) + " > " +
                LinuxShell.getCmdPath(destination.getAbsolutePath())) != null;
    }

    public static boolean canReadFile(File file) {
        BufferedReader reader = LinuxShell.execute("cat " + LinuxShell.getCmdPath(file.getAbsolutePath()));
        try {
            reader.read();
            reader.close();
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    public static BufferedReader readFile(File file) {
        try {
            return LinuxShell.execute("cat " + LinuxShell.getCmdPath(file.getAbsolutePath()));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private static class LinuxShell {

        public static String getCmdPath(String path) {
            return path.replace(" ", "\\ ").replace("'", "\\'");
        }

        public static BufferedReader execute(String cmd) {
            BufferedReader reader;
            try {
                Process process = Runtime.getRuntime().exec("su");
                DataOutputStream os = new DataOutputStream(process.getOutputStream());
                os.writeBytes(cmd + "\n");
                os.writeBytes("exit\n");
                reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                String err = (new BufferedReader(new InputStreamReader(process.getErrorStream()))).readLine();
                os.flush();

                if (process.waitFor() != 0 || (!"".equals(err) && null != err)) {
                    Log.e("920TERoot", err);
                    return null;
                }
                return reader;
            } catch (IOException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }

            return null;
        }

        public static boolean isRoot() {
            boolean retval = false;
            Process suProcess;

            try {
                suProcess = Runtime.getRuntime().exec("su");

                DataOutputStream os =
                        new DataOutputStream(suProcess.getOutputStream());
                DataInputStream osRes =
                        new DataInputStream(suProcess.getInputStream());

                if (null != os && null != osRes) {
                    // Getting the id of the current user to check if this is root
                    os.writeBytes("id\n");
                    os.flush();

                    String currUid = osRes.readLine();
                    boolean exitSu;
                    if (null == currUid) {
                        retval = false;
                        exitSu = false;
                        Log.e("ROOT", "Can't get root access or denied by user");
                    } else if (currUid.contains("uid=0")) {
                        retval = true;
                        exitSu = true;
                    } else {
                        retval = false;
                        exitSu = true;
                        Log.e("ROOT", "Root access rejected: " + currUid);
                    }

                    if (exitSu) {
                        os.writeBytes("exit\n");
                        os.flush();
                    }
                }
            } catch (Exception e) {
                // Can't get root !
                // Probably broken pipe exception on trying to write to output
                // stream after su failed, meaning that the device is not rooted

                retval = false;
                Log.e("ROOT", "Root access rejected [" +
                        e.getClass().getName() + "] : " + e.getMessage());
            }

            return retval;
        }

    }
}
